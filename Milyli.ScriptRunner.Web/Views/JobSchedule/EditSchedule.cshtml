@using Newtonsoft.Json
@using Milyli.ScriptRunner.Core.Models
@model JobScheduleModel
@{
    ViewBag.Title = Model.JobSchedule.Name;
    var days = new List<string>() { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
}
<style>
  
</style>

<div id="job-schedule-edit">
    <div id="mask"></div>
        <h3>Job Schedule Details - @Model.JobSchedule.Name</h3>
    <div id="edit-schedule" class="schedule">
        <div class="schedule-section">
            <div class="job-details">
                <h4>Job Details</h4>
                <div data-bind="with: JobSchedule">
                    <label>Job Name</label><input id="JobName" class="form-control" type="text" data-bind="value : Name, style: { borderColor: Name().length < 1 ? 'red' : 'black'}" maxlength="255" /><br />
                    <label>Last Execution Time</label><span data-bind="text : LastExecutionTimeString"></span><br />
                    <label>Next Execution Time</label> <span data-bind="text : NextExecutionTimeString"></span><br />
                    <label>Exectues At</label>
                    <input data-bind="value : ExecutionTimeHours" type="number" min="1" max="12" step="1" />:<input data-bind="value : ExecutionTimeMinutes" type="number" min="0" max="59" step="1" />
                    <select data-bind="value:ExecutionTimeMeridian">
                        <option>AM</option>
                        <option>PM</option>
                    </select>
                    <div class="form-check">
                        <label class="form-check-label" for="directSql">Execute Through Direct SQL</label>
                        <input data-bind="checked : DirectSql" type="checkbox" class="form-check-input" id="directSql">
                    </div>
                    <div data-bind="visible: DirectSql">
                        <label>Maximum SQL Timeout (seconds)</label>
                        <input data-bind="value : MaximumRuntime" type="number" min="30" max="86400" step="1" value="3600"/>
                    </div>
                </div>
                <div data-bind="with: RelativityWorkspace">
                    <label>Workspace</label><a href="@Url.Action("List", "RelativityScript", new { relativityWorkspaceId = Model.RelativityWorkspace.WorkspaceId })">@Model.RelativityWorkspace.Name</a>
                </div>
                <div data-bind="with: RelativityScript">
                    <label>Script</label><a data-bind="text : Name"
                                            href="@Url.Action("Script", "RelativityScript",
                                                 new { relativityWorkspaceId = Model.RelativityWorkspace.WorkspaceId, relativityScriptId = Model.RelativityScript.RelativityScriptId })"></a> (<span data-bind="text : RelativityScriptId"></span>)
                </div>
                <div>
                    <label>Job Status</label><span data-bind="text : JobStatusName"></span>
                </div>
            </div>
            <div class="day-picker">
                <h4>Runs On</h4>
                <div class="btn-group" data-toggle="buttons">
                    @foreach (var day in days)
                    {

                        <label class="btn btn-default" data-bind="css : { active : @string.Format("{0}()", day) }, click : function(){ toggle('@day') }">
                            @day
                        </label>
                    }
                </div>
            </div>
        </div>
        <div class="schedule-section">
            <h4>Script Inputs</h4>
            <div data-bind="foreach: JobScriptInputs" class="script-inputs">
                <div class="input-container" data-bind="css: { required : IsRequired(), invalid : IsInvalid() }">
                    <label data-bind="text: InputName">
                    </label>
                    <div data-bind="ifnot : HasOptions">
                        <input type="text" data-bind="value: InputValue" />
                    </div>
                    <div data-bind="if: HasOptions">
                        <select data-bind="options: Options, optionsText : 'name', optionsValue : 'value', value: InputValue"></select>
                    </div>
                </div>
            </div>
        </div>
        <div class="schedule-footer">
            <div data-bind="css : { 'error-notification' : IsInvalid() }, text : InvalidText"></div>
            <div class="btn-group" role="group">
                <button class="btn btn-primary" id="save-job-schedule" data-bind="click: SaveJobSchedule, disable: (!HasName() || IsInvalid()), attr {title : InvalidText}">Save</button>
                <!-- ko if: AllowRun -->
                    <button class="btn btn-secondary" data-bind="click: RunJob">Save and Run</button>
                <!-- /ko -->
                <!-- ko if: !IsNew() -->
                    <button class="btn btn-secondary" data-bind="text: EnableDisableText, click: EnableDisableJob">Enable/Disable</button>
                <!-- /ko -->
            </div>
        </div>
        <div class="run-script-container">
            <iframe id="run-script" src="/Relativity/Case/RelativityScript/Run.aspx?AppID=@Model.RelativityWorkspace.WorkspaceId&ArtifactID=@Model.RelativityScript.RelativityScriptId"></iframe>
        </div>
    </div>
    @if (!Model.IsNew)
    {
    <div id="job-schedule-history">
        <h3>Job history</h3>
        <a href="javascript:void window.open('/Relativity/Audit.aspx?AppID=@Model.RelativityWorkspace.WorkspaceId&ArtifactID=@Model.RelativityScript.RelativityScriptId&ArtifactTypeID=@RelativityScript.ScriptArtifactTypeId','audithistory','height=500,width=800,location=no,scrollbars=yes,menubar=no,toolbar=no,status=no,resizable=yes');">Audit (opens in new window)</a>
        <table>
            <thead>
                <tr>
                    <th colspan="3" class="pagination">
                        <div class="page-number">
                            <a href="javascript;" class="fa fa-fast-backward" data-bind="click : GoFirstPage"></a>
                            <a href="javascript;" class="fa fa-backward" data-bind="click : GoPreviousPage"></a>
                            <span data-bind="text : PageNumberText"></span>
                            <a href="javascript;" class="fa fa-forward" data-bind="click : GoNextPage"></a>
                            <a href="javascript;" class="fa fa-fast-forward" data-bind="click : GoLastPage"></a>
                        </div>
                        <div class="page-size">
                            <select data-bind="value : PageSize">
                                <option value="5">5</option>
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                            </select>
                        </div>
                    </th>
                </tr>
                <tr>
                    <th>Start Time</th>
                    <th>Running Time, Seconds</th>
                    <th>Result</th>
                </tr>
            </thead>
            <tbody data-bind="if: JobHistory().length == 0">
                <tr>
                    <td>No Previous Jobs</td>
                </tr>
            </tbody>
            <tbody data-bind="foreach: JobHistory">
                <tr>
                    <td data-bind="text : StartTimeString"></td>
                    <td data-bind="text : Runtime"></td>
                    <td>
                        <span data-bind="if : HasError">
                            <span data-bind="text: ResultText"></span>
                        </span>
                        <span data-bind="ifnot : HasError">
                            Success
                        </span>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    }
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/JobSchedule")

    <script type="text/javascript">
        //Used by the RunScript iframe.
        function ResetTimeout()
        {
        };

        function unmask()
        {
            $("#mask").css("display", "none");
        };

        function mask()
        {
            $("#mask").css("display", "block");
        };

        function MakeOptionsArray($inputContainerElement)
        {
            return $inputContainerElement.find("option")
                .map(function(idx, element)
                {
                    var $element = $(element);
                    return {
                        value: $element.attr("value"),
                        name : $element.text()
                    };
                })
                .toArray();
        }
       
        // We have to scrape the page because the RSAPI mechanisms for Relatvitiy scripts do not readily support populating input lists
        function getInputValues()
        {
            return $("#run-script").contents()
                                    .find("table.fieldTable")
                                    .map(function(idx, element)
                                    {
                                        var $element = $(element);
                                        var inputId = $element.find("tr:first").attr("id");
                                        var options = MakeOptionsArray($element);
                                        return {
                                            inputId : inputId,
                                            options : options
                                        };
                                    })
            .toArray()
            .reduce(function(accum, curr){
                if(curr.options && curr.options.length)
                {
                    accum[curr.inputId] = curr.options;
                }
                return accum;
            },{});
        };


        var days  = @Html.Raw(JsonConvert.SerializeObject(days));
        var JobStatus =
        {
            "0" : "Idle",
            "1" : "Waiting for agent",
            "2" : "Running"
        };

        var viewmodelContainer = new JobScheduleViewModel(
            @Html.Raw(JsonConvert.SerializeObject(Model)),
            {
                Run : "@Url.Action("Run")",
                Save : "@Url.Action("Save")",
                Index : "@Url.Action("Index")"
            });

        $("#run-script").on("load", function()
        {
            viewmodelContainer.UpdateOptions(getInputValues());
            ko.applyBindings(viewmodelContainer.GetViewModel(), $("#edit-schedule")[0]);
        });

        if(!viewmodelContainer.IsNew())
        {
            var jobHistoryBuilder = new JobHistoryLoader("@Url.Action("JobHistory")", @Model.JobSchedule.Id);
            var jobHistoryViewModel = new JobHistoryViewModel(jobHistoryBuilder, function(historyViewModel)
            {
                ko.applyBindings(historyViewModel, $("#job-schedule-history")[0]);
            });
        }

    </script>
}

